#
# systemd unit file for CentOS 7, Ubuntu 15.04
#
# Customize this file based on your bundler location, app directory, etc.
# Put this in /usr/lib/systemd/system (CentOS) or /lib/systemd/system (Ubuntu).
# Run:
#   - systemctl enable sidekiq
#   - systemctl {start,stop,restart} sidekiq
#
# This file corresponds to a single Sidekiq process.  Add multiple copies
# to run multiple processes (sidekiq-1, sidekiq-2, etc).
#
# See Inspeqtor's Systemd wiki page for more detail about Systemd:
# https://github.com/mperham/inspeqtor/wiki/Systemd
#
# PRE-REQUISITES
#   - rvm alias create sidekiq ruby-2.2.2@default
#

[Unit]
Description=sidekiq
# start us only once the network and logging subsystems are available,
# consider adding redis-server.service if Redis is local and systemd-managed.
After=syslog.target network.target

# See these pages for lots of options:
# http://0pointer.de/public/systemd-man/systemd.service.html
# http://0pointer.de/public/systemd-man/systemd.exec.html
[Service]
User=deployer
Group=deployer
UMask=0002
WorkingDirectory=/opt/rails/goodcity_server/current/

# This works but isn't compatible with cap sidekiq:(re)start|stop
Type=simple
ExecStart=/home/deployer/.rvm/wrappers/sidekiq/bundle exec sidekiq -e staging --logfile /opt/rails/goodcity_server/shared/log/sidekiq.log

# Work in progress, untested
#Type=forking
#ExecStart=/home/deployer/.rvm/wrappers/sidekiq/bundle exec "sidekiq -d -C config/sidekiq.yml"
#ExecStop=/home/deployer/.rvm/wrappers/sidekiq/bundle exec "sidekiqctl stop /opt/rails/goodcity_server/shared/tmp/pids/sidekiq.pid"




# if we crash, restart
RestartSec=1
Restart=on-failure

# output goes to /var/log/syslog
StandardOutput=syslog
StandardError=syslog

# This will default to "bundler" if we don't specify it
SyslogIdentifier=sidekiq

[Install]
WantedBy=multi-user.target
